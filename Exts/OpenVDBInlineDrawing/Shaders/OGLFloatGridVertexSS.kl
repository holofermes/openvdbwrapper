require InlineDrawing;
require FabricOGL;

object OGLFloatGridVertexSS: OGLInlineShader{};

// default constructor without a name
function OGLFloatGridVertexSS() {
  // Avoid calling the init method if this default constructor is being invoked
  // during the construction of a derived object.
  if(this.type() == OGLFloatGridVertexSS)
    this.init(String(this.type()));
}

// default constructor taking a name
function OGLFloatGridVertexSS(String name) {
    this.init(name);
}
function OGLFloatGridVertexSS.init!(String name) {
  this.name = name;
  this.setVertexCode("
      #version 150 //required for OSX support

      uniform mat4 u_viewMatrix;
      uniform mat4 u_projection;
      uniform mat4 u_modelMatrix;
      uniform mat3 u_normalMatrix;

      uniform vec3 u_light0Position;
      uniform vec4 u_light0Color;
      uniform float u_screenWidth;

      in vec4 positions;
      in float vertexColors;
      in vec3 normals;

      out vec3 v_normal;
      out vec4 v_position;
      out vec3 v_lightDir;
      out vec4 v_lightColor;
      out vec3 v_eyeVec;
      out float v_vertexColors;

      void main(){
        // if(u_levelSet == 1){
        v_normal = u_normalMatrix * normals;
        // }
        v_position = u_modelMatrix * positions;
        vec4 v_positionInv = (u_viewMatrix * vec4(v_position.xyz, 1.0));
        gl_Position = u_projection * v_positionInv;
        gl_PointSize = u_screenWidth / gl_Position.w;

        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        v_eyeVec = -v_positionInv.xyz;
        v_vertexColors = vertexColors;
      }
    ");
  this.setFragmentCode("
      #version 150 //required for OSX support

      uniform float u_vertexMult;
      uniform vec4 u_vertexTint;
      uniform float u_minValue;
      uniform float u_maxValue;
      uniform mat4 u_colorMap;
      uniform int u_levelSet;
      uniform int u_mapMinMax;

      in vec3 v_normal;
      in vec4 v_position;
      in vec3 v_lightDir;
      in vec4 v_lightColor;
      in vec3 v_eyeVec;
      in float v_vertexColors;

      out vec4 out_fragColor;

      void main() {
        if(u_mapMinMax == 0){
          out_fragColor = u_vertexTint * (u_vertexMult*v_vertexColors);
        }
        else{
          vec4 final_color;

          float w = 0.0;
          vec2 offset, scale;
          float zero = 0.0;//grid.zeroValue();
          float one = 1.0;//grid.oneValue();
          offset.x = min(one, u_minValue);
          scale.x = 1.0 / float(abs(max(zero, u_maxValue) - offset.x));
          offset.y = min(0.0, u_minValue);
          scale.y = 1.0 / float(abs(max(zero, u_maxValue) - offset.y));

          if (v_vertexColors < 0.0) {// is negative
            if (u_levelSet == 1) {
              final_color = u_colorMap[1];
            } else{
              w = (v_vertexColors - offset.y) * scale.y;
              final_color = w * u_colorMap[0] + (1.0 - w) * u_colorMap[1];
            }
          } else {
            if (u_levelSet == 1) {
              final_color = u_colorMap[2];
            }
            else{
              w = (v_vertexColors - offset.x) * scale.x;
              final_color = w * u_colorMap[2] + (1.0 - w) * u_colorMap[3];
            }
          }
          if (u_levelSet == 0) {
            out_fragColor = final_color;
          }
          else {
            vec3 N = normalize(v_normal);
            vec3 L = normalize(v_lightDir);

            float lambertTerm = dot(N,L);

            lambertTerm = abs(lambertTerm);

            if(lambertTerm > 0.0)
            {
              final_color += v_lightColor  * v_vertexColors * lambertTerm;
              vec3 E = normalize(v_eyeVec);
              vec3 R = reflect(-L, N);
              float specular = pow( max(dot(R, E), 0.0), 16.0/*specularFactor*/ );
              final_color += specular;
            }

            out_fragColor = final_color;
          }
        }
      }
    ");
  this.defineUniform(InlineUniform("u_viewMatrix", Mat44()));
  this.defineUniform(InlineUniform("u_projection", Mat44()));
  this.defineUniform(InlineUniform("u_modelMatrix", Mat44()));
  this.defineUniform(InlineUniform("u_normalMatrix", Mat33()));

  this.defineUniform(InlineUniform("u_light0Position", Vec3(100, 100, 100)));
  this.defineUniform(InlineUniform("u_light0Color", Color(1.0, 1.0, 1.0)));
  this.defineUniform(InlineUniform("u_screenWidth", 10.0));

  this.defineUniform(InlineUniform("u_vertexMult", 1.0));
  this.defineUniform(InlineUniform("u_vertexTint", Color(1.0, 1.0, 1.0)));
  this.defineUniform(InlineUniform("u_minValue", 0.0));
  this.defineUniform(InlineUniform("u_maxValue", 1.0));
  this.defineUniform(InlineUniform("u_colorMap", Mat44(Vec4(0.3, 0.9, 0.3, 1.0),
                                                       Vec4(0.9, 0.3, 0.3, 1.0),
                                                       Vec4(0.9, 0.9, 0.3, 1.0),
                                                       Vec4(0.3, 0.3, 0.9, 1.0))));
  this.defineUniform(InlineUniform("u_levelSet", Integer(0)));
  this.defineUniform(InlineUniform("u_mapMinMax", Integer(0)));


  this.defineAttribute('positions', "Vec3");
  this.defineAttribute('vertexColors', "Float32");
  this.defineAttribute('normals', "Vec3");
}

// called by the InlineDrawing, should not be called manually
function Boolean OGLFloatGridVertexSS.draw!(io DrawContext context) {

  if(context.lightPositions.size() > 0)
    this.setUniform(InlineUniform('u_light0Position', context.lightPositions[0]));
  else
    this.setUniform(InlineUniform('u_light0Position', context.viewport.getCamera().getMat44().translation()));

  if(context.lightColors.size() > 0)
    this.setUniform(InlineUniform('u_light0Color', context.lightColors[0]));

  // this.setUniform(InlineUniform('u_light0Position', context.viewport.getCamera().getMat44().translation()));

  Float32 fovY = context.viewport.getCamera().getFovY();
  Float32 scaleFactor = fovY * (1.0/context.viewport.getDimensions().y);
  // Float32 heightOfPlane = abs(context.viewport.getDimensions().y) / (2*tan(0.5*fovY*PI/180.0));

  this.setUniform(InlineUniform('u_screenWidth', scaleFactor));

  Float32 quadratic[];
  quadratic.push(0.0f);
  quadratic.push(0.0f);
  quadratic.push(0.01f );
  glEnable(GL_VERTEX_PROGRAM_POINT_SIZE);
  glPointParameterfvARB( GL_POINT_DISTANCE_ATTENUATION_ARB, quadratic );
  glTexEnvi( GL_POINT_SPRITE_ARB, GL_COORD_REPLACE_ARB, GL_TRUE );
  glEnable( GL_POINT_SPRITE_ARB );
  glDisable(GL_POINT_SMOOTH);
  Boolean result = this.parent.draw(context);
  glEnable(GL_POINT_SMOOTH);

    glDisable( GL_POINT_SPRITE_ARB );

  return result;
}