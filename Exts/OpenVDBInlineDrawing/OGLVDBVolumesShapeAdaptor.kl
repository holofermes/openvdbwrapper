/*
 *  Copyright 2010-2015 Fabric Software Inc. All rights reserved.
 */

/**
\versionadded 1.12.0

The OGLVDBVolumesShapeAdaptor implements the InlineShapeAdaptor interface. It is used to draw a InlineVDBVolumesShape within an OpenGL viewport.
*/
object OGLVDBVolumesShapeAdaptor : InlineShapeAdaptor {};

/// default constructor
function OGLVDBVolumesShapeAdaptor() {}

/// returns the types this adaptor is capable of drawing
function String[] OGLVDBVolumesShapeAdaptor.getShapeTypes() {
  String result[];
  result.push('InlineVDBVolumesShape');
  return result;
}

/// draws the points to the screen. this is used by the
/// InlineInstance, and should not be called manually.
/// \internal
function Boolean OGLVDBVolumesShapeAdaptor.draw!(io DrawContext context, io Ref<InlineShape> shape, Index index, Size count) {

  // access the points shape
  InlineVDBVolumesShape volumesShape = shape;
  VDBVolumes volumes = volumesShape.getVolumes();
  OGLBufferDictionary buffers = volumesShape.getMetaData('buffers');
  if(buffers == null) {
    buffers = OGLBufferDictionary();
    volumesShape.setMetaData('buffers', buffers);
  }

  if(volumes.gridCount() == 0)
    return true;

  if(index == 0) {

    // reset all versions if the uid changed
    if(buffers.getVersion('uid') != volumes.uid()) {
      buffers.resetAllVersions();
      buffers.setVersion('uid', volumes.uid());
    }

    InlineShader shader = context.getMetaData('currentShader');
    OGLShape_updateGeometryAttributeBuffers(context, buffers, volumes.getAttributes());

    if(buffers.getVersion('topology') != volumes.getVersion()) {
      OGLBuffer buffer = buffers.get('topology');
      if(buffer == null) {
        buffer = OGLBuffer();
        buffer.bufferType = GL_ARRAY_BUFFER;
        buffer.bufferUsage = GL_STATIC_DRAW;
        buffers.set('topology', buffer);
      }
      if( buffer.bufferID )
        buffer.bufferUsage = GL_DYNAMIC_DRAW;//Loaded at least 2 times: lazily upgrade to "dynamic"

      UInt32 indices[];
      indices.resize(volumes.pointVizCount());
      for(Size i=0;i<indices.size();i++)
        indices[i] = i;

      buffer.bufferElementComponentType = GL_UNSIGNED_INT;

      buffer.genBuffer(indices.data(), indices.dataSize(), indices.size());

      buffers.setVersion('topology', volumes.getVersion());
    }
  }

  OGLBuffer buffer = buffers.get('topology');
  if(buffer == null){
    report("Warning: invalid topology for :" +shape.getName());
    return false;
  }

  if(index == 0)
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, buffer.bufferID);

  // glPointSize(100.0f/*volumesShape.getPointSize()*/);

  Data NULL;
  glDrawElements(GL_POINTS, buffer.elementCount, buffer.bufferElementComponentType, NULL);

  if(index == count - 1)
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

  return true;
}